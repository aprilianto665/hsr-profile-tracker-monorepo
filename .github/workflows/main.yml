name: CI for HSR Profile Tracker Monorepo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  backend-go:
    name: Backend • Go build & test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download modules
        run: go mod download

      - name: Vet
        run: go vet ./...

      - name: Build (sanity)
        run: |
          CGO_ENABLED=0 GOOS=linux go build -ldflags "-s -w" -o ./ci-app ./cmd/api

  frontend-web:
    name: Frontend • Install & build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Lint (if present)
        run: |
          npm run lint --if-present

      - name: Typecheck (if present)
        run: |
          npm run typecheck --if-present

      - name: Build
        run: npm run build

  dockerfiles-build:
    name: Dockerfiles • Build images (no push)
    runs-on: ubuntu-latest
    needs: [ backend-go, frontend-web ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: hsr/backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: hsr/frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-docker:
    name: Publish Docker images to ACR
    runs-on: ubuntu-latest
    needs: [ dockerfiles-build ]
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        run: |
          az acr login --name hsrregistry

      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: hsrregistry.azurecr.io/backend:${{ github.sha }}

      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: hsrregistry.azurecr.io/frontend:${{ github.sha }}

  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    needs: [ publish-docker ]
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Container Apps Environment (create if missing)
        run: |
          az containerapp env show -g hsr-rg -n hsr-env >/dev/null 2>&1 \
            || az containerapp env create -g hsr-rg -n hsr-env -l southeastasia

      - name: Deploy backend (create or update)
        run: |
          ACR_USER=$(az acr credential show -n hsrregistry --query username -o tsv)
          ACR_PASS=$(az acr credential show -n hsrregistry --query passwords[0].value -o tsv)
          if az containerapp show -g hsr-rg -n hsr-backend >/dev/null 2>&1; then
            az containerapp update -g hsr-rg -n hsr-backend \
              --image hsrregistry.azurecr.io/backend:${{ github.sha }}
          else
            az containerapp create -g hsr-rg -n hsr-backend \
              --environment hsr-env \
              --image hsrregistry.azurecr.io/backend:${{ github.sha }} \
              --target-port 3000 --ingress external \
              --registry-server hsrregistry.azurecr.io \
              --registry-username "$ACR_USER" --registry-password "$ACR_PASS"
          fi

      - name: Deploy frontend (create or update)
        run: |
          ACR_USER=$(az acr credential show -n hsrregistry --query username -o tsv)
          ACR_PASS=$(az acr credential show -n hsrregistry --query passwords[0].value -o tsv)
          if az containerapp show -g hsr-rg -n hsr-frontend >/dev/null 2>&1; then
            az containerapp update -g hsr-rg -n hsr-frontend \
              --image hsrregistry.azurecr.io/frontend:${{ github.sha }}
          else
            az containerapp create -g hsr-rg -n hsr-frontend \
              --environment hsr-env \
              --image hsrregistry.azurecr.io/frontend:${{ github.sha }} \
              --target-port 80 --ingress external \
              --registry-server hsrregistry.azurecr.io \
              --registry-username "$ACR_USER" --registry-password "$ACR_PASS"
          fi